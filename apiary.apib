FORMAT: 1A
HOST: https://localhost/rest.php/v1

# OpenNetAdmin API
  The ONA api info

# Plugins

It is possible to extend ONA with the use of plugins.  Some of these plugins provide their own API endpoints. The following link will show the installed plugins and provide documentation links if available.

[Plugin documenation index](local/plugins)




# Authentication

Authentication is handled by the use of a JWT token.
This token must be passed in the `Authorization` header of each transaction.

To obtain a token you must provide a username and password to the `/login` endpoint as described below.

Tokens are subject to an expiration time as well as only being valid when coming from the same client ip that generated it.

To secure your transaction you should configure SSL encryption.

# Group Login

## Auth [/login{?user,pass}]

### Login [POST]
Use the token field from the resulting json for Authentication.

+ Parameters
    + user: `admin` - The username to authenticate
    + pass: `admin` - The password for authentication

+ Response 200 (application/json;charset=utf-8)

        {"status_code": 0, "status_msg": "Token generation successful", "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJsb2NhbGhvc3QtMTAuMC4yLjE1IiwiYXVkIjoiMTAuMC4ylJiIlcjPYXQiOjE0ODQwNzMwNzMsIm5iZiI6MTQ4NDA3MzA3OCwiZXhwIjoxNDg0MDc2NjczLCJ1c2VybmFtZSI6ImFkbWluIn0.GjABq8Jhi6LY4fDs7ygMVnJVcF1gCdx8PH5uz6pvrqc" }

+ Response 401 (application/json;charset=utf-8)

        {"status_code": 1, "status_msg": "Authentication token not sent" }

+ Response 403 (application/json;charset=utf-8)

        {"status_code": 1, "status_msg": "Token Issue: some sort of error" }






# Group Subnets

## Subnet list [/subnets{?name,type,ip,endip,tag,catype,cavalue,fields}]

### List all subnets [GET]

List all subnets in ONA. Optionally provide search parameters to narrow the returned list.

+ Parameters
  + name: `MY-LAN` (optional) - List subnets matching the string.  Use % as a wildcard character.
  + type: `WAN` (optional) - Existing subnet type defined within ONA.
  + ip: `192.168` (optional) - IP address, any single IP will match the containing subnet. Any missing IPv4 octets will be filled with a 0.
  + endip: `192.168.255.255` (optional) - Must be used in combination with the `ip` option. Provides the end IP in a range of IP addresses to match. Any missing IPv4 octets will be filled with a 255.
  + tag: `mytag,tag2` (optional) - One or more tags to match comma separated.
  + catype: `nmap_scan` (optional) - Subnet with a custom attribute type matching string.
  + cavalue: `Y` (optional) - Subnet with a custom attribute value matching string.
  + fields: `id,name` (optional) - A comma separated list of specific result fields to return.

+ Response 200 (application/json;charset=utf-8)
  + Attributes (Subnets)

+ Response 403 (application/json;charset=utf-8)

        {"status_code": 1, "status_msg": "Token Issue: some sort of error" }

### Create a new subnet [POST]

Creates a new subnet

+ Request (application/json)
  + Attributes (Subnet Add)

+ Response 201 (application/json;charset=utf-8)
  + Attributes (Subnets)

+ Response 403 (application/json;charset=utf-8)

        {"status_code": 1, "status_msg": "Token Issue: some sort of error" }

## Subnet [/subnets/{subnet}{?verbose,fields}]
Perform operations on a specific subnet

### List single subnet [GET]
Return information about a single subnet.  Optionally get a verbose output of information.

+ Parameters
  + subnet: `192.168.0.0` - Name or IP of a subnet.
  + verbose: `Y` (optional) - Display more detailed information about the subnet.
  + fields: `id,name` (optional) - A comma separated list of specific result fields to return.

+ Response 200 (application/json;charset=utf-8)
  + Attributes (Subnets)

+ Response 403 (application/json;charset=utf-8)

        {"status_code": 1, "status_msg": "Token Issue: some sort of error" }

### Modify single subnet [POST]
Modify a subnet and set new values

When setting a `vlan` you must also provide the `campus`.

You can set one or more attributes in your request.

+ Parameters
  + subnet: `192.168.0.0` - Name or IP of a subnet.

+ Request (application/json)
  + Attributes (Subnet Modify)

+ Response 200 (application/json;charset=utf-8)
  + Attributes (Subnets)

+ Response 400 (application/json;charset=utf-8)

### Delete single subnet [DELETE]
Delete a subnet

+ Parameters
  + subnet: `192.168.0.0` - Name or IP of a subnet.

+ Response 204 (application/json;charset=utf-8)


## Subnet [/subnets/{subnet}/nextip/{?offset}]

### Get next available IP [GET]
Request the next available IP address on a subnet

If you use the network name for the `subnet` identifier the starting point
will be the base IP of the subnet. You can provide an `offset` query option to 
start deeper into the subnet.

If you use an IP address on a subnet it will use that IP as the starting
point to search for an available IP.  You can also use `offset` if desired but
it is simpler to just specify a direct IP to start looking for an available.

+ Parameters
  + subnet: `192.168.10.21` - Name or IP of a subnet.
  + offset: `10` (optional) - Offset to add to our subnet input

+ Response 200 (application/json;charset=utf-8)

        {
          "ip_addr": "3232238115",
          "ip_addr_text": "192.168.10.35",
          "status_code": 0,
          "status_msg": ""
        }




# Group Domains

## Domain list [/domains{?name,fields}]

### List all domains [GET]
List all domains

TODO: NOTE: domain query on dns_record will not allow % on the string.  note that in docs here

+ Parameters
  + fields: `id,name` (optional) - A comma separated list of specific result fields to return.

+ Response 200 (application/json;charset=utf-8)
  + Attributes (Subnets)

+ Response 403 (application/json;charset=utf-8)

        {"status_code": 1, "status_msg": "Token Issue: some sort of error" }

### Create a new domain [POST]

Creates a new domain

+ Request (application/json)
  + Attributes (Domains)

+ Response 201 (application/json;charset=utf-8)
  + Attributes (Domains)

+ Response 403 (application/json;charset=utf-8)

        {"status_code": 1, "status_msg": "Token Issue: some sort of error" }

## Domain [/domains/{domain}{?fields}]
Perform operations on a specific domain

### List single domain [GET]
Return information about a single domain.

+ Parameters
  + domain: `example.com` - Name of domain.
  + fields: `id,name` (optional) - A comma separated list of specific result fields to return.

+ Response 200 (application/json;charset=utf-8)
  + Attributes (Domains)

+ Response 403 (application/json;charset=utf-8)

### Delete single domain [DELETE]
Delete a domain

+ Parameters
  + domain: `example.com` - Name or ID of a domain.

+ Response 204 (application/json;charset=utf-8)







# Data Structures

## `Status` (object)
  + status_code: `0` (number) - Status code from module
  + status_msg: `Successfully did the thing you asked` (string) - A human readable status message

## `Subnets` (object)
  + include Status
  + subnets (array[Subnet])

## `Subnet` (object)
  + id: `22` (string) - Database unique ID
  + ip_addr: `3232235520` (string) - Numeric representation of an IPv4 or IPv6 address
  + ip_addr_text: `192.168.0.0` (string) - IPv4 or IPv6 address in a dotted notation
  + ip_mask: `4294967040` (string) - Numeric representation of a network mask
  + ip_mask_cidr: `24` (string) - CIDR value for mask
  + ip_mask_text: `255.255.255.0` (string) - Dotted representation of network mask
  + name: `LAN-EXAMPLE` (string) - Name of the subnet
  + subnet_type_id: `13` (string) - Database unique ID for the subnet type
  + subnet_type_name: `LAN` (string) - Name of the subnets type

## `Subnet Add` (object)
  + name: `LAN-EXAMPLE` (string) - Name of the subnet
  + type: `LAN` (string) - Name of the subnets type
  + ip: `192.168.0.0` (string) - IPv4 or IPv6 address in any std format
  + netmask: `255.255.255.0` (string) - IP netmask in dotted or CIDR format
  + vlan: `vlan001` (string, optional) -  Existing vlan name, number to associate this subnet with
  + campus: `CAMPUS` (string, optional) - VLAN campus name or id that `vlan` is assigned to

## `Subnet Modify` (object)
  + set_ip: `192.168.0.0` (string) - IPv4 or IPv6 address in a dotted notation
  + set_netmask: `255.255.255.0` (string) - Dotted or CIDR representation of network mask
  + set_name: `LAN-EXAMPLE` (string) - Name of the subnet
  + set_type: `VLAN` (string) - Subnet type. Must be an existing type in the system
  + campus: `CAMPUS-NAME` (string) - Campus name that `set_vlan` value is assoicated with
  + set_vlan: `VLAN123` (string) - Vlan name to assign, Must provide `campus` as well


## `Domains` (object)
  + include Status
  + domains (array[Domain])

## `Domain` (object)
  + admin_email: `domains@example.com` (string) - Admin email used for SOA record
  + ctime: `2017-02-02 15:31:47` (string) - Create time
  + default_ttl: `86400` (string) - Default time to live used for SOA record
  + expiry: `1048576` (number) - Domain expire time in seconds, used for SOA record
  + fqdn: `domaintest.com` (string) - Domain fully quailified name
  + id: `60` (string) - Database unique ID
  + minimum: `2560` (number) - Domain expire time in seconds, used for SOA record
  + mtime: `2017-02-02 15:31:47` (string) - Modify time
  + name: `domaintest.com` (string) - Domain name
  + parent_id: `0` (string) - Database unique ID for parent domain record
  + primary_master: `ns1.example.com` (string) - Primary master name server to serve this domain
  + refresh: `16384` (number) - Domain expire time in seconds, used for SOA record
  + retry: `2048` (number) - Domain expire time in seconds, used for SOA record
  + serial: `22233221` (number) - Domain expire time in seconds, used for SOA record
